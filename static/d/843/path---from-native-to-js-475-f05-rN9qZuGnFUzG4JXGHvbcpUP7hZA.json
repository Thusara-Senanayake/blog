{"data":{"site":{"siteMetadata":{"title":"@codebytere blogs","author":"Shelley Vohr"}},"markdownRemark":{"id":"6220436e-01d0-5c31-ba73-eab5e8a4c203","excerpt":"How do Electron’s features written in C++ or Objective-C get to JavaScript so they’re available to an end-user? To trace this pathway, start with the   module…","html":"<p>How do Electron’s features written in C++ or Objective-C get to JavaScript so they’re available to an end-user?</p>\n<p>To trace this pathway, start with the <a href=\"https://electronjs.org/docs/api/app\"><code class=\"language-text\">app</code> module</a>.</p>\n<p>By opening the <a href=\"https://github.com/electron/electron/tree/master/lib/browser/api/app.ts\"><code class=\"language-text\">app.ts</code></a> file inside our <code class=\"language-text\">lib/</code> directory, you’ll find the following line of code towards the top:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> binding <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">electronBinding</span><span class=\"token punctuation\">(</span><span class=\"token string\">'app'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This line points directly to Electron’s mechanism for binding its C++/Objective-C modules to JavaScript for use by developers.</p>\n<p>This function is created by the header and <a href=\"https://github.com/electron/electron/tree/master/atom/common/api/atom_bindings.cc\">implementation file</a> for the <code class=\"language-text\">ElectronBindings</code> class.</p>\n<h2><code class=\"language-text\">process.electronBinding</code></h2>\n<p>These files add the <code class=\"language-text\">process.electronBinding</code> function, which behaves like Node.js’ <code class=\"language-text\">process.binding</code>. <code class=\"language-text\">process.binding</code> is a lower-level implementation of Node.js’ <a href=\"https://nodejs.org/api/modules.html#modules_require_id\"><code class=\"language-text\">require()</code></a> method, except it allows users to <code class=\"language-text\">require</code> native code instead of other code written in JS. This custom <code class=\"language-text\">process.electronBinding</code> function confers the ability to load native code from Electron.</p>\n<p>When a top-level JavaScript module (like <code class=\"language-text\">app</code>) requires this native code, how is the state of that native code determined and set? Where are the methods exposed up to JavaScript? What about the properties?</p>\n<h2><code class=\"language-text\">native_mate</code></h2>\n<p>Answers to this question can be found in <code class=\"language-text\">native_mate</code>:  a fork of Chromium’s <a href=\"https://chromium.googlesource.com/chromium/src.git/+/lkgr/gin/\"><code class=\"language-text\">gin</code> library</a> that makes it easier to marshal types between C++ and JavaScript.</p>\n<p>Inside <code class=\"language-text\">native_mate/native_mate</code> there’s a header and implementation file for <code class=\"language-text\">object_template_builder</code>. This is what allow us to form modules in native code whose shape conforms to what JavaScript developers would expect.</p>\n<h3><code class=\"language-text\">mate::ObjectTemplateBuilder</code></h3>\n<p>By considering every module in Electron to be an object, the mechanism behind using an object template creator becomes clearer. V8 implements the JavaScript (ECMAScript) specification, so its native functionality implementations can be directly correlated to implementations in JavaScript. For example, <a href=\"https://v8docs.nodesource.com/node-0.8/db/d5f/classv8_1_1_object_template.html\"><code class=\"language-text\">v8::ObjectTemplate</code></a> gives us JavaScript objects without a dedicated constructor function and prototype. It uses <code class=\"language-text\">Object[.prototype]</code>, and in JavaScript would be equivalent to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\"><code class=\"language-text\">Object.create()</code></a>.</p>\n<p>To see this in action, look to the implementation file for the app module: <a href=\"https://github.com/electron/electron/tree/master/atom/browser/api/atom_api_app.cc\"><code class=\"language-text\">atom_api_app.cc</code></a> At the bottom is the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">mate<span class=\"token operator\">::</span><span class=\"token function\">ObjectTemplateBuilder</span><span class=\"token punctuation\">(</span>isolate<span class=\"token punctuation\">,</span> prototype<span class=\"token operator\">-></span><span class=\"token function\">PrototypeTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">SetMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getGPUInfo\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>App<span class=\"token operator\">::</span>GetGPUInfo<span class=\"token punctuation\">)</span></code></pre></div>\n<p>In the above line, <code class=\"language-text\">.SetMethod</code> is called on <code class=\"language-text\">mate::ObjectTemplateBuilder</code>. <code class=\"language-text\">.SetMethod</code> can be called on any instances of the <code class=\"language-text\">ObjectTemplateBuilder</code> class to set methods on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\">Object prototype</a> in JavaScript, with the following syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token punctuation\">.</span><span class=\"token function\">SetMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method_name\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>function_to_bind<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is the JavaScript equivalent of:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getGPUInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// implementation here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This class also contains functions to set properties on a module:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"property_name\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>getter_function_to_bind<span class=\"token punctuation\">)</span></code></pre></div>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token punctuation\">.</span><span class=\"token function\">SetProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"property_name\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>getter_function_to_bind<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>setter_function_to_bind<span class=\"token punctuation\">)</span></code></pre></div>\n<p>These would in turn be the JavaScript implementations of <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> <span class=\"token string\">'myProperty'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _myProperty\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> <span class=\"token string\">'myProperty'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _myProperty\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>newPropertyValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _myProperty <span class=\"token operator\">=</span> newPropertyValue\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>With this, it’s possible to create JavaScript objects formed with prototypes and properties as developers expect them, and more clearly reason about functions and properties implemented at this lower system level.</p>","frontmatter":{"title":"From Native to JS in Electron","date":"April 20, 2019","description":"How do Electron's features written in C++ or Objective-C get to JavaScript so they're available to an end-user?"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/from-native-to-js/","previous":null,"next":null}}